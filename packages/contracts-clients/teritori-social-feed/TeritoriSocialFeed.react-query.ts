//@ts-nocheck

/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.25.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  UseQueryOptions,
  useQuery,
  useMutation,
  UseMutationOptions,
} from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import {
  Addr,
  Config,
  ExecuteMsg,
  Uint128,
  InstantiateMsg,
  PostCategory,
  PostResult,
  Reaction,
  Post,
  QueryMsg,
} from "./FuryaSocialFeed.types";
import {
  FuryaSocialFeedQueryClient,
  FuryaSocialFeedClient,
} from "./FuryaSocialFeed.client";
export const furyaSocialFeedQueryKeys = {
  contract: [
    {
      contract: "furyaSocialFeed",
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [
      { ...furyaSocialFeedQueryKeys.contract[0], address: contractAddress },
    ] as const,
  config: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...furyaSocialFeedQueryKeys.address(contractAddress)[0],
        method: "config",
        args,
      },
    ] as const,
  queryFeeByCategory: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...furyaSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_fee_by_category",
        args,
      },
    ] as const,
  queryLockedTokens: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...furyaSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_locked_tokens",
        args,
      },
    ] as const,
  queryAvailableFreePosts: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...furyaSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_available_free_posts",
        args,
      },
    ] as const,
  queryPost: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...furyaSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_post",
        args,
      },
    ] as const,
  querySubPost: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...furyaSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_sub_post",
        args,
      },
    ] as const,
  querySubPosts: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...furyaSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_sub_posts",
        args,
      },
    ] as const,
  queryMainPosts: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...furyaSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_main_posts",
        args,
      },
    ] as const,
  queryMainPostsCount: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...furyaSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_main_posts_count",
        args,
      },
    ] as const,
};
export interface FuryaSocialFeedReactQuery<TResponse, TData = TResponse> {
  client: FuryaSocialFeedQueryClient | undefined;
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined;
  };
}
export interface FuryaSocialFeedQueryMainPostsCountQuery<TData>
  extends FuryaSocialFeedReactQuery<QueryMainPostsCountResponse, TData> {}
export function useFuryaSocialFeedQueryMainPostsCountQuery<
  TData = QueryMainPostsCountResponse
>({ client, options }: FuryaSocialFeedQueryMainPostsCountQuery<TData>) {
  return useQuery<QueryMainPostsCountResponse, Error, TData>(
    furyaSocialFeedQueryKeys.queryMainPostsCount(client?.contractAddress),
    () =>
      client
        ? client.queryMainPostsCount()
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface FuryaSocialFeedQueryMainPostsQuery<TData>
  extends FuryaSocialFeedReactQuery<QueryMainPostsResponse, TData> {
  args: {
    count: number;
    from: number;
    sort: string;
    user?: string;
  };
}
export function useFuryaSocialFeedQueryMainPostsQuery<
  TData = QueryMainPostsResponse
>({ client, args, options }: FuryaSocialFeedQueryMainPostsQuery<TData>) {
  return useQuery<QueryMainPostsResponse, Error, TData>(
    furyaSocialFeedQueryKeys.queryMainPosts(client?.contractAddress, args),
    () =>
      client
        ? client.queryMainPosts({
            count: args.count,
            from: args.from,
            sort: args.sort,
            user: args.user,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface FuryaSocialFeedQuerySubPostsQuery<TData>
  extends FuryaSocialFeedReactQuery<QuerySubPostsResponse, TData> {
  args: {
    count: number;
    from: number;
    identifier: string;
    sort: string;
    user?: string;
  };
}
export function useFuryaSocialFeedQuerySubPostsQuery<
  TData = QuerySubPostsResponse
>({ client, args, options }: FuryaSocialFeedQuerySubPostsQuery<TData>) {
  return useQuery<QuerySubPostsResponse, Error, TData>(
    furyaSocialFeedQueryKeys.querySubPosts(client?.contractAddress, args),
    () =>
      client
        ? client.querySubPosts({
            count: args.count,
            from: args.from,
            identifier: args.identifier,
            sort: args.sort,
            user: args.user,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface FuryaSocialFeedQuerySubPostQuery<TData>
  extends FuryaSocialFeedReactQuery<QuerySubPostResponse, TData> {
  args: {
    identifier: string;
    index: number;
    user?: string;
  };
}
export function useFuryaSocialFeedQuerySubPostQuery<
  TData = QuerySubPostResponse
>({ client, args, options }: FuryaSocialFeedQuerySubPostQuery<TData>) {
  return useQuery<QuerySubPostResponse, Error, TData>(
    furyaSocialFeedQueryKeys.querySubPost(client?.contractAddress, args),
    () =>
      client
        ? client.querySubPost({
            identifier: args.identifier,
            index: args.index,
            user: args.user,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface FuryaSocialFeedQueryPostQuery<TData>
  extends FuryaSocialFeedReactQuery<QueryPostResponse, TData> {
  args: {
    identifier: string;
    user?: string;
  };
}
export function useFuryaSocialFeedQueryPostQuery<TData = QueryPostResponse>({
  client,
  args,
  options,
}: FuryaSocialFeedQueryPostQuery<TData>) {
  return useQuery<QueryPostResponse, Error, TData>(
    furyaSocialFeedQueryKeys.queryPost(client?.contractAddress, args),
    () =>
      client
        ? client.queryPost({
            identifier: args.identifier,
            user: args.user,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface FuryaSocialFeedQueryAvailableFreePostsQuery<TData>
  extends FuryaSocialFeedReactQuery<QueryAvailableFreePostsResponse, TData> {
  args: {
    wallet: string;
  };
}
export function useFuryaSocialFeedQueryAvailableFreePostsQuery<
  TData = QueryAvailableFreePostsResponse
>({
  client,
  args,
  options,
}: FuryaSocialFeedQueryAvailableFreePostsQuery<TData>) {
  return useQuery<QueryAvailableFreePostsResponse, Error, TData>(
    furyaSocialFeedQueryKeys.queryAvailableFreePosts(
      client?.contractAddress,
      args
    ),
    () =>
      client
        ? client.queryAvailableFreePosts({
            wallet: args.wallet,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface FuryaSocialFeedQueryLockedTokensQuery<TData>
  extends FuryaSocialFeedReactQuery<QueryLockedTokensResponse, TData> {
  args: {
    wallet: string;
  };
}
export function useFuryaSocialFeedQueryLockedTokensQuery<
  TData = QueryLockedTokensResponse
>({ client, args, options }: FuryaSocialFeedQueryLockedTokensQuery<TData>) {
  return useQuery<QueryLockedTokensResponse, Error, TData>(
    furyaSocialFeedQueryKeys.queryLockedTokens(
      client?.contractAddress,
      args
    ),
    () =>
      client
        ? client.queryLockedTokens({
            wallet: args.wallet,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface FuryaSocialFeedQueryFeeByCategoryQuery<TData>
  extends FuryaSocialFeedReactQuery<QueryFeeByCategoryResponse, TData> {
  args: {
    category: number;
  };
}
export function useFuryaSocialFeedQueryFeeByCategoryQuery<
  TData = QueryFeeByCategoryResponse
>({ client, args, options }: FuryaSocialFeedQueryFeeByCategoryQuery<TData>) {
  return useQuery<QueryFeeByCategoryResponse, Error, TData>(
    furyaSocialFeedQueryKeys.queryFeeByCategory(
      client?.contractAddress,
      args
    ),
    () =>
      client
        ? client.queryFeeByCategory({
            category: args.category,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface FuryaSocialFeedConfigQuery<TData>
  extends FuryaSocialFeedReactQuery<ConfigResponse, TData> {}
export function useFuryaSocialFeedConfigQuery<TData = ConfigResponse>({
  client,
  options,
}: FuryaSocialFeedConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(
    furyaSocialFeedQueryKeys.config(client?.contractAddress),
    () =>
      client ? client.config() : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface FuryaSocialFeedCreatePostByBotMutation {
  client: FuryaSocialFeedClient;
  msg: {
    category: number;
    identifier: string;
    metadata: string;
    parentPostIdentifier?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuryaSocialFeedCreatePostByBotMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      FuryaSocialFeedCreatePostByBotMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    FuryaSocialFeedCreatePostByBotMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.createPostByBot(msg, fee, memo, funds),
    options
  );
}
export interface FuryaSocialFeedAddAIBotMutation {
  client: FuryaSocialFeedClient;
  msg: {
    addr: Addr;
    name: string;
    postLimit: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuryaSocialFeedAddAIBotMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      FuryaSocialFeedAddAIBotMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, FuryaSocialFeedAddAIBotMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.addAIBot(msg, fee, memo, funds),
    options
  );
}
export interface FuryaSocialFeedWithdrawFundMutation {
  client: FuryaSocialFeedClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuryaSocialFeedWithdrawFundMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      FuryaSocialFeedWithdrawFundMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    FuryaSocialFeedWithdrawFundMutation
  >(
    ({ client, args: { fee, memo, funds } = {} }) =>
      client.withdrawFund(fee, memo, funds),
    options
  );
}
export interface FuryaSocialFeedUnlockTokensMutation {
  client: FuryaSocialFeedClient;
  msg: {
    amount: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuryaSocialFeedUnlockTokensMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      FuryaSocialFeedUnlockTokensMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    FuryaSocialFeedUnlockTokensMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.unlockTokens(msg, fee, memo, funds),
    options
  );
}
export interface FuryaSocialFeedLockTokensMutation {
  client: FuryaSocialFeedClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuryaSocialFeedLockTokensMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      FuryaSocialFeedLockTokensMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    FuryaSocialFeedLockTokensMutation
  >(
    ({ client, args: { fee, memo, funds } = {} }) =>
      client.lockTokens(fee, memo, funds),
    options
  );
}
export interface FuryaSocialFeedDeletePostMutation {
  client: FuryaSocialFeedClient;
  msg: {
    identifier: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuryaSocialFeedDeletePostMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      FuryaSocialFeedDeletePostMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    FuryaSocialFeedDeletePostMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.deletePost(msg, fee, memo, funds),
    options
  );
}
export interface FuryaSocialFeedTipPostMutation {
  client: FuryaSocialFeedClient;
  msg: {
    identifier: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuryaSocialFeedTipPostMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, FuryaSocialFeedTipPostMutation>,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, FuryaSocialFeedTipPostMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.tipPost(msg, fee, memo, funds),
    options
  );
}
export interface FuryaSocialFeedReactPostMutation {
  client: FuryaSocialFeedClient;
  msg: {
    icon: string;
    identifier: string;
    up: boolean;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuryaSocialFeedReactPostMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      FuryaSocialFeedReactPostMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, FuryaSocialFeedReactPostMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.reactPost(msg, fee, memo, funds),
    options
  );
}
export interface FuryaSocialFeedUpdatePostMutation {
  client: FuryaSocialFeedClient;
  msg: {
    category: number;
    identifier: string;
    metadata: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuryaSocialFeedUpdatePostMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      FuryaSocialFeedUpdatePostMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    FuryaSocialFeedUpdatePostMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updatePost(msg, fee, memo, funds),
    options
  );
}
export interface FuryaSocialFeedCreatePostMutation {
  client: FuryaSocialFeedClient;
  msg: {
    category: number;
    identifier: string;
    metadata: string;
    parentPostIdentifier?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuryaSocialFeedCreatePostMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      FuryaSocialFeedCreatePostMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    FuryaSocialFeedCreatePostMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.createPost(msg, fee, memo, funds),
    options
  );
}
export interface FuryaSocialFeedAddFreePostsMutation {
  client: FuryaSocialFeedClient;
  msg: {
    freeCount: Uint128;
    wallets: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuryaSocialFeedAddFreePostsMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      FuryaSocialFeedAddFreePostsMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    FuryaSocialFeedAddFreePostsMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.addFreePosts(msg, fee, memo, funds),
    options
  );
}
export interface FuryaSocialFeedUpdateFeeByCategoryMutation {
  client: FuryaSocialFeedClient;
  msg: {
    category: number;
    fee: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuryaSocialFeedUpdateFeeByCategoryMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      FuryaSocialFeedUpdateFeeByCategoryMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    FuryaSocialFeedUpdateFeeByCategoryMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateFeeByCategory(msg, fee, memo, funds),
    options
  );
}
export interface FuryaSocialFeedUpdateConfigMutation {
  client: FuryaSocialFeedClient;
  msg: {
    owner?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useFuryaSocialFeedUpdateConfigMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      FuryaSocialFeedUpdateConfigMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    FuryaSocialFeedUpdateConfigMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateConfig(msg, fee, memo, funds),
    options
  );
}
